package DAO;



import java.sql.*;
import Model.Account;
import Util.ConnectionUtil;


/**
 * A DAO is a class that mediates the transformation of data between the format of objects in Java to rows in a
 * database. The methods here are mostly filled out, you will just need to add a SQL statement.
 *
 * We may assume that the database has already created a table named 'book'.
 * It contains similar values as the Author class:
 * isbn, which is of type int and is a primary key,
 * author_id, which is of type int, and is a foreign key associated with the column 'id' of 'author',
 * title, which is of type varchar(255),
 * copies_available, which is of type int.
 * @version 1.0 09-24-2023
 * @author Abdalrhman Alhassan
 */

public class AccountDAO {


    /**
     * insertAccount: insert an account into the account table.
     * The account_id should be automatically generated by the sql database if it is not provided because it was
     * set to auto_increment.
     * @param account: an account object to be inserted.
     * @return account: new account object with the the generated account id.
     */

    public Account insertAccount(Account account){

        Connection conn = ConnectionUtil.getConnection();
        
        String sql = "insert into account (username,password) values (?,?)";

        try {
            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, account.getUsername());
            ps.setString(2, account.getPassword());
            ps.executeUpdate();

            ResultSet pkResultSet = ps.getGeneratedKeys();

            if(pkResultSet.next()){
                int generated_account_id = (int)pkResultSet.getLong(1);
                return new Account(generated_account_id, account.getUsername(), account.getPassword());
            }
        } catch (SQLException e) {
           
            e.printStackTrace();
        }

        return null;

    }

    /**
     * geAccountByID: Select an account based on its account_id.
     * @param accountId: int of account_id.
     * @return account: new account object if exist in database.
     */
    public Account geAccountById(int accountId){
        Connection conn = ConnectionUtil.getConnection();

        String sql = "select * from account where account_id=?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, accountId);
            ResultSet rs = ps.executeQuery();

            while(rs.next()){
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password"));

                return account;

            }

        } catch (SQLException e) {
           
            e.printStackTrace();
        }


        return null;
    }

    /**
     * geAccountByUserName: Select an account based on its user_name.
     * @param user_name: String of user_name.
     * @return account: new account object if exist in database.
     */
    public Account geAccountByUserName(String user_name){
        Connection conn = ConnectionUtil.getConnection();
        
        
        String sql = "select * from account where username=?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, user_name);
            ResultSet rs = ps.executeQuery();

            while(rs.next()){
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password"));

                return account;

            }

        } catch (SQLException e) {
            
            e.printStackTrace();
        }


        return null;
    }

     /**
     * geAccountByUserNamePassword: Select an account based on its user_name and password.
     * @param user_name: String of user_name.
     * @param password: String of password.
     * @return account: new account object if exist in database.
     */
    public Account geAccountByUserNamePassword(String user_name,String password){
        Connection conn =  ConnectionUtil.getConnection();
       
        String sql = "select * from account where username=? and password=?";

        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, user_name);
            ps.setString(2,password);
            ResultSet rs = ps.executeQuery();

            while(rs.next()){
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password"));

                return account;

            }

        } catch (SQLException e) {
            
            e.printStackTrace();
        }


        return null;
    }

}
